Pydantic vs ORM:

In main.py, the Post class extends BaseModel from the Pydantic library, which serves as our schema. 
This is used in our path operations, such as the create_post operation, where a variable post of 
type Post is defined.

In models.py, we have our SQLAlchemy model, which defines the structure of our database table. 
For example, the Post class inherits from Base, which is imported from .database.

Pydantic models define the structure of request and response data. When a user wants to create a
 post, the request must include a title and content field in the body. Pydantic models provide 
 validation, ensuring that all data fields in the request match what we expect.

SQLAlchemy models are responsible for defining the columns of our posts table in PostgreSQL. 
These models are used to query, create, delete, and update entries within the database.